library(usethis)
data("mtcars")
force(mtcars)
View(mtcars)
table(matcars$cyl)
table(mtcars$cyl)
c(n = length(x), mean = mean(x), sd = sd(x))
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
stats(mtcars$cyl)
stats(mtcars$mpg)
?by
?groupby
?group_by
## if we want to look at these stats by the cylinders
by(mtcars$mpg, levels(mtcars$cyl) ,stats)
## if we want to look at these stats by the cylinders
by(mtcars$mpg, levels(mtcars$cyl) ,stats)
## if we want to look at these stats by the cylinders
by(mtcars$mpg, levels(mtcars$cyl), stats)
## if we want to look at these stats by the cylinders
by(mtcars, levels(mtcars$cyl), stats)
## if we want to look at these stats by the cylinders
by(mtcars, mtcars$cyl, stats(mtcars$mpg))
## if we want to look at these stats by the cylinders
by(mtcars, mtcars$cyl, stats)
## if we want to look at these stats by the cylinders
groups <- as.factor(mtcars$cyl)
grousp
groups
by(mtcars$mpg, groups, stats)
by(mtcars$mpg, groups, stats)
## if we want to look at these stats by the cylinders
by(mtcars$mpg, as.factor(mtcars$cyl), stats)
by(mtcars$mpg, as.factor(mtcars$cyl), summary)
## if we want to look at these stats by different values of cylinder
by(mtcars$mpg, as.factor(mtcars$cyl), stats)
## if we want to look at these stats by different values of cylinder
cyl_groups <- as.factor(mtcars$cyl)
## if we want to look at these stats by different values of cylinder
cyl_group <- as.factor(mtcars$cyl)
by(mtcars$mpg, cyl_group, stats)
data("mtcars")
# is there a relationship btwn cyl (number of cylinders) and mpg (fuel efficiency)?
table(mtcars$cyl)
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
stats(mtcars$mpg)
## if we want to look at these stats by different values of cylinder
cyl_group <- as.factor(mtcars$cyl)
by(mtcars$mpg, cyl_group, stats)
by(mtcars$mpg, mtcars$cyl, stats)
by(mtcars$mpg, cyl_group, stats)
resul <- by(mtcars$mpg, cyl_group, stats) ## by() is generalizable but the downside is
## what if you save
result
## what if you save
resul
## what if you save
class(resul)
result <- by(mtcars$mpg, cyl_group, stats) ## by() is generalizable but the downside is
result_df <- as.data.frame((result))
result_df <- as.data.frame(result)
result_df <- as.list(result)
result_df
result_list<- as.list(result)
result_df <- as.data.frame(result_list)
class(result_list)
class(result_list)<-list
class(result_list)<-"list"
result_df <- as.data.frame(result_list)
View(result_df)
aggregate(mpg~cyl, data = mtcars, stats)
result2 <- aggregate(mpg~cyl, data = mtcars, stats)
result2
result2 <- aggregate(mpg~cyl, data = mtcars, stats)
class(result2)
## alt sol 2
sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
## alt sol 2
result <- sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
## alt sol 2
result3 <- sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
split(mtcars$mpg, factor(mtcars$cyl)
split(mtcars$mpg, factor(mtcars$cyl))
split(mtcars$mpg, factor(mtcars$cyl))
result3
class(result3)
stats_by < function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
}
stats_by <- function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
}
stats_by(mtcars$mpg, mtcars$cyl)
return(result)
stats_by <- function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
return(result)
}
stats_by(mtcars$mpg, mtcars$cyl)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data)
}
## oneway(mpg~cyl, data=mtcars)
## could have defined this way but we'll go with formula version
## oneway <- function(y, group, data, ...){}
## oneway(y="mpg", group="cyl", data=mtcars)
oneway(mpg~cyl, mtcars)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data)
return(fit)
}
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
summary(x)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data) ## creating a model
## summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x)))
result <- list(anova=fit, summarystats = stats)
return(result)
}
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data) ## creating a model
## summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
result <- list(anova=fit, summarystats = stats)
return(result)
}
x<-oneway(mpg~cyl, mtcars)
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
summary(x)
oneway <- function(formula, data, ...){
# delete missing data
data<- na.omit(data)
# anova
fit <- lm(formula, data) ## lm() drops any cases of NA
# summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
result <- list(anova=fit, summarystats = stats)
return(result)
}
oneway(mpg~cyl, mtcars)
oneway <- function(formula, data, ...){
# delete missing data
data<- na.omit(data)
# anova
fit <- lm(formula, data) ## lm() drops any cases of NA
# summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
# return results
result <- list(anova=fit, summarystats = stats)
class(result) <- "oneway"
return(result)
}
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
class(x)
oneway
x
usethis::use_mit_license(name="Naraa Altai")
library(oneway)
rm(oneway)
?oneway
library(oneway)
use_readme_md()
?use_readme_md
library(usethis)
use_readme_md()
library(pkgdown)
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
build_site()
