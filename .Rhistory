result_df <- as.data.frame(result)
result_df <- as.list(result)
result_df
result_list<- as.list(result)
result_df <- as.data.frame(result_list)
class(result_list)
class(result_list)<-list
class(result_list)<-"list"
result_df <- as.data.frame(result_list)
View(result_df)
aggregate(mpg~cyl, data = mtcars, stats)
result2 <- aggregate(mpg~cyl, data = mtcars, stats)
result2
result2 <- aggregate(mpg~cyl, data = mtcars, stats)
class(result2)
## alt sol 2
sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
## alt sol 2
result <- sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
## alt sol 2
result3 <- sapply(split(mtcars$mpg, factor(mtcars$cyl)), stats)
split(mtcars$mpg, factor(mtcars$cyl)
split(mtcars$mpg, factor(mtcars$cyl))
split(mtcars$mpg, factor(mtcars$cyl))
result3
class(result3)
stats_by < function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
}
stats_by <- function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
}
stats_by(mtcars$mpg, mtcars$cyl)
return(result)
stats_by <- function(x, factor){
stats <- function(x){
c(n = length(x), mean = mean(x), sd = sd(x))
}
result <- sapply(split(x, factor), stats)
return(result)
}
stats_by(mtcars$mpg, mtcars$cyl)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data)
}
## oneway(mpg~cyl, data=mtcars)
## could have defined this way but we'll go with formula version
## oneway <- function(y, group, data, ...){}
## oneway(y="mpg", group="cyl", data=mtcars)
oneway(mpg~cyl, mtcars)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data)
return(fit)
}
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
summary(x)
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data) ## creating a model
## summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x)))
result <- list(anova=fit, summarystats = stats)
return(result)
}
oneway <- function(formula, data, ...){
# anova
fit <- lm(formula, data) ## creating a model
## summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
result <- list(anova=fit, summarystats = stats)
return(result)
}
x<-oneway(mpg~cyl, mtcars)
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
summary(x)
oneway <- function(formula, data, ...){
# delete missing data
data<- na.omit(data)
# anova
fit <- lm(formula, data) ## lm() drops any cases of NA
# summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
result <- list(anova=fit, summarystats = stats)
return(result)
}
oneway(mpg~cyl, mtcars)
oneway <- function(formula, data, ...){
# delete missing data
data<- na.omit(data)
# anova
fit <- lm(formula, data) ## lm() drops any cases of NA
# summary stats
stats <- aggregate(formula, data,
function(x) c(n=length(x),
mean=mean(x),
sd=sd(x))) ## function(x) is called
## anonymous function or lambda
# return results
result <- list(anova=fit, summarystats = stats)
class(result) <- "oneway"
return(result)
}
oneway(mpg~cyl, mtcars)
x<-oneway(mpg~cyl, mtcars)
class(x)
oneway
x
usethis::use_mit_license(name="Naraa Altai")
library(oneway)
rm(oneway)
?oneway
library(oneway)
use_readme_md()
?use_readme_md
library(usethis)
use_readme_md()
library(pkgdown)
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
build_site()
library(oneway)
?oneway
library(oneway)
?oneway
fit<-oneway(mpg~cyl, mtcars)
names(fit)
fit$anova
summary(fit$anova)
fit$summarystats
class(fit)
fit
?cat
print.oneway <- function(x, ...){
cat("Summary Statistics ",
print(x$summarystats, ...))
cat("Anova",
print(summary.lm(x$anova)))
}
print.oneway <- function(x, ...){
cat("Summary Statistics ",
print(x$summarystats, ...))
cat("Anova",
print(summary.lm(x$anova)))
}
library(oneway)
?print.oneway
mileage <- oneway(mpg~cyl, mtcars)
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics ")#,
#      print(x$summarystats, ...))
#  cat("Anova",
#      print(summary.lm(x$anova)))
}
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics ",
print(x$summarystats, ...))
#  cat("Anova",
#      print(summary.lm(x$anova)))
}
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics ")
print(x$summarystats, ...)
cat("Anova")
print(summary.lm(x$anova))
}
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics \n")
print(x$summarystats, ...)
cat("Anova \n")
print(summary.lm(x$anova))
}
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics \n", "==================\n")
print(x$summarystats, ...)
cat("Anova \n",  "==================\n")
print(summary.lm(x$anova))
}
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
cat("Summary Statistics \n", "==============================\n")
print(x$summarystats, ...)
cat("Anova \n",  "==============================\n")
print(summary.lm(x$anova))
}
print(mileage)
#'
#' @param x an object of class oneway.
#' @param ... additional arguments passed to the function.
#'
#' @return the input object is returned silently.
#' @export
#' @examples
#' # ADD_EXAMPLES_HERE
#' # mileage <- oneway(mpg~cyl, mtcars)
#' print(mileage)
print.oneway <- function(x, ...){
## check if x is oneway object
if(!inherits(x, "oneway"))
stop("Must be class 'oneway'")
cat("Summary Statistics \n", "==============================\n")
print(x$summarystats, ...)
cat("Anova \n",  "==============================\n")
print(summary.lm(x$anova))
}
print.oneway(mtcars)
library(oneway)
mileage
mileage
mileage$summarystats
View(mileage)
names(mileage$anova)
mileage$anova$terms
mileage$anova$terms ## formula
mileage$anova$model ## data frame
boxplot(mileage$anova$terms, mileage$anova$model)
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway"))
stop("Must be class 'oneway'")
boxplot(x$anova$terms, x$anova$model, ... ) ## boxplot(formula, dataframe)
}
#' plot.oneway creates group comparisons for a one-way ANOVA.
#'
#' @param x an ibject of class 'oneway'.
#' @param ... additional arguments passed to boxplot function.
#'
#' @return RETURN_DESCRIPTION
#' @export
#' @examples
#' # mileage <- oneway(mpg~cyl, mtcars)
#' plot(mileage)
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway"))
stop("Must be class 'oneway'")
boxplot(x$anova$terms, x$anova$model, ... ) ## boxplot(formula, dataframe)
}
library(oneway)
?plot.oneway
plot(mileage)
library(oneway)
mileage$anova
anova(mileage$anova)
summary.oneway <- function(x, ...){
## check if x is of class 'oneway'
if(!inherits(x, "oneway"))
stop("Must be class 'oneway'")
anova(x$anova)
}
library(oneway)
library(oneway)
?anova
library(oneway)
?summary.oneway
clear()
clear
clean
library(pkgdown)
build_site()
library(oneway)
library(oneway)
library(oneway)
build_site()
library(oneway)
build_site()
getwd()
getwd()
library(oneway)
library(pkgdown)
build_site()
library((testthat))
library(testthat)
library(usethis)
use_vignette("oneway")
build_site()
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
View(cars)
use_data(cars)
library(oneway)
?cars
build_site()
fit <- oneway(mpg ~ carb, mtcars)
fit
?dplyr::group_by
library(dplyr)
stats_dplyr <- dplyr::group_by(mtcars, by=cyl, n=count(), mean = mean(mpg), sd = st())
stats_dplyr <- group_by(mtcars, by=cyl, n=count(), mean = mean(mpg), sd = st())
stats_dplyr <- group_by(mtcars, by=cyl, n=count(mpg), mean = mean(mpg), sd = st())
stats_dplyr <- group_by(mtcars, by=cyl, n=count(mpg), mean = mean(mpg), sd = sd())
stats_dplyr <- group_by(mtcars, by=cyl) %>%
count()
View(stats_dplyr)
stats_dplyr <- group_by(mtcars, by=cyl) %>%
count() %>%
mean()
stats_dplyr <- group_by(mtcars, by=cyl) %>%
count() %>%
mean()
stats_dplyr <- group_by(mtcars, by=cyl) %>%
count() %>%
mean(mpg)
?group_by
stats_dplyr <- group_by(mtcars, by=cyl)
View(stats_dplyr)
stats_dplyr <- group_by(mtcars, cyl)
View(stats_dplyr)
stats_dplyr <- group_by(mtcars, by=cyl, n=count(mpg), mean = mean(mpg), sd = sd())
stats_dplyr <- mtcars %>%
group_by(cyl) %>%
summarise(n=n(),
mean = mean(mpg),
sd = sd(mpg))
stats_dplyr <- mtcars %>%
group_by(cyl) %>%
summarise(n=n(),
mean = mean(mpg),
sd = sd(mpg))
stats_dplyr <- mtcars %>%
group_by(cyl) %>%
summarise(n=n(),
mean = mean(mpg),
sd = sd(mpg))
View(stats_dplyr)
rm(stats_dplyr)
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]]))
}
mystats(mtcars, group="cyl", y = "mpg")
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mtcars, group="cyl", y = "mpg")
?as.data.frame
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame(row.names=NULL)
}
mystats(mtcars, group="cyl", y = "mpg")
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame(,row.names=NULL)
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame(row.names=NULL)
}
mystats(mtcars, group="cyl", y = "mpg")
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mtcars, group="cyl", y = "mpg")
?enquo
mystats <- function(data, group, y){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
group <- enquo(group)
y <- enquo(y)
data %>%
group_by(!!group) %>%
summarise(n=n(),
mean = mean(!!y),
sd = sd(!!y)) %>%
as.data.frame()
}
mystats(mtcars, group=cyl, y = mpg)
x<- as.formula(mpg~cyl)
x[[1]]
x[[2]]
x[[3]]
mystats <- function(formula, data){ ## dataset, grouping variable, and y is mpg in this case
require(dplyr)
group<- as.character(formula[[3]])
y<-as.character(formula[[2]])
data %>%
group_by(.data[[group]]) %>%
summarise(n=n(),
mean = mean(.data[[y]]),
sd = sd(.data[[y]])) %>%
as.data.frame()
}
mystats(mpg~cyl, mtcars)
library(oneway)
fit <-oneway(mpg~cyl, mtcars)
fit
library(crayon)
red$bold$underline("Summary Statistics")
library(oneway)
fit <-oneway(mpg~cyl, mtcars)
fit
library(oneway)
fit <-oneway(mpg~cyl, mtcars)
fit
